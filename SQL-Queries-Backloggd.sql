-- SELECTING THE DATABASE PROJECT
USE [Backloggd Project]

-- Seeing the whole database --
SELECT *
FROM Backloggd

-- SELECTING THE TOP 20 GAMES IN THE SITE BY RATING AND TIMES LISTED WITH MORE THAN 100 LISTINGS -- 
SELECT TOP 20 *
FROM Backloggd
WHERE [Times Listed] > 100
ORDER BY Rating DESC, [Times Listed] DESC;

-- SELECTING THE TOP 50 GAMES CURRENTLY BEING PLAYED RIGHT NOW --
SELECT TOP 25 *
FROM Backloggd
ORDER BY Playing DESC;

-- SELECTING THE TOP 25 GAMES WITH THE MOST PLAYS EVER --
SELECT TOP 25 *
FROM Backloggd
ORDER BY Plays DESC;

-- TOP 30 GAMES CURRENTLY AVAILABLE BASED ON NUMBER OF WISHLISTS --
SELECT TOP 30 Title, Console, ROUND(Rating, 2) AS Rating, Wishlist, Plays, [Release Date]
FROM Backloggd
WHERE [Release Date] < CURRENT_TIMESTAMP
ORDER BY Wishlist DESC, Rating DESC;

-- VIEWING THE 'SILKSONG' ENTRY AS IT HAS BEEN ANNOUNCED BUT DOESN'T HAVE A DATE OF RELEASE YET --
SELECT *
FROM Backloggd
WHERE Title LIKE '%Silksong%';

-- GAMES ANNOUNCED BUT NOT RELEASED THAT WERE NOT DROPPED IN THE CLEANING PROCEDURE (PROBABLY FROM HAVING A DATE AND NOT A TBD IN THE RELEASE DATE COLUMN)
-- THERE MAY BE GAMES THAT HAVE FAKE RELEASE DATES, HAVE BEEN CANCELED OR BOTH.
SELECT *
FROM Backloggd
WHERE [Release Date] > CURRENT_TIMESTAMP;

-- TOP 20 GAMES THAT HAVE YET TO COME OUT --
SELECT TOP 20 *
FROM Backloggd
WHERE [Release Date] > CURRENT_TIMESTAMP
ORDER BY Wishlist DESC;

-- ANALYZING CONSOLES --


-- NUMBER OF CONSOLES AND TIMES LISTED --

SELECT Console, COUNT(Console) as Number_of_Times_Listed
FROM Consoles
GROUP BY Console
ORDER BY Number_of_Times_Listed DESC;

-- CONSOLES AND OTHER DATA
SELECT Console, COUNT(Title) AS Titles, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Consoles
GROUP BY Console
ORDER BY Titles DESC;

-- TOP 5 CONSOLES IN NUMBER OF GAMES, THEIR MAX, AVG AND MIN RATING AS WELL AS THEIR PLAYS, PLAYING AND WISHLIST PER GAME --
SELECT TOP 5 Console, COUNT(Title) AS Number_of_Games, ROUND(MAX(Rating),2) AS MAX_Rating, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(MIN(Rating),2) AS MIN_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Consoles
GROUP BY Console
ORDER BY Number_of_Games DESC;

-- TOP 5 CONSOLES WITH MORE THAN 150 GAMES BY THEIR AVG RATING --
SELECT TOP 5 Console, COUNT(Title) AS Number_of_Games, ROUND(MAX(Rating),2) AS MAX_Rating, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(MIN(Rating),2) AS MIN_Rating
FROM Consoles
GROUP BY Console
HAVING COUNT(Title) > 150
ORDER BY AVG_Rating DESC;

-- OLDEST AND LATEST GAMES --
SELECT Console, COUNT(Title) AS Titles, MAX([Release Date]) AS Latest_Release_Date, MIN([Release Date]) AS First_Release_Date
FROM Consoles
GROUP BY Console
ORDER BY MAX([Release Date]) DESC;

-- OLDEST GAME BY CONSOLE --
SELECT Console, COUNT(Title) AS Titles, MIN([Release Date]) AS First_Release_Date, MAX([Release Date]) AS Latest_Release_Date
FROM Consoles
GROUP BY Console
ORDER BY MIN([Release Date]) ASC;

-- ANALYZING GENRES --
-- ANALYZING THE TOP GENRES WITH HIGHEST AVG_RATING --
SELECT Genres, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Genre
GROUP BY Genres
HAVING Genres IS NOT NULL AND GENRES NOT LIKE ''
ORDER BY AVG_Rating DESC;

-- ANALYZING GENRES WITH HIGHEST AVG_RATING AND NUMBER OF TITLES --
SELECT Genres, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Genre
GROUP BY Genres
HAVING Genres IS NOT NULL AND GENRES NOT LIKE ''
ORDER BY AVG_Played DESC;

-- ANALYZING TEAMS -- 
-- ORDERING TEAMS BY AVG_RATING WHEN THEY HAVE MORE THAN 5 TITLES AND MORE THAN 1000 PLAYS --
SELECT Team, COUNT(Title) as Number_of_Titles, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Teams
WHERE Plays > 1000
GROUP BY Team
HAVING COUNT(Title) > 5
ORDER BY AVG_Rating DESC;

-- ORDERING TEAMS BY NUMBER OF TITLES AND AVG_RATING WHEN THEY HAVE MORE THAN 5 TITLES AND MORE THAN 1000 PLAYS --
SELECT Team, COUNT(Title) as Number_of_Titles, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Teams
WHERE Plays > 1000
GROUP BY Team
HAVING COUNT(Title) > 5
ORDER BY Number_of_Titles DESC, AVG_Rating DESC;

-- TEAMS BY AVERAGE NUMBER OF TIMES PLAYED WITHOUT MORE THAN 5 TITLES IN THEIR NAME (ONE HIT WONDERS) --
SELECT Team, COUNT(Title) AS No_of_Titles, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Teams
WHERE Plays > 1000
GROUP BY Team
ORDER BY AVG_Played DESC;

-- TEAMS BY AVG_RATING WITH MORE THAN 1000 TIMES PLAYED (THERE WILL BE REPEATED TITLES DUE TO DLC AND GOTY BEING CONSIDERED ANOTHER TITLE'
SELECT Title, Team, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Backloggd
WHERE Plays > 1000
GROUP BY Team, Title
ORDER BY AVG_Rating DESC;
 
-- TEAMS BY AVG_RATING WITH MORE THAN 1000 TIMES PLAYED (THERE WILL BE REPEATED TITLES DUE TO DLC AND GOTY BEING CONSIDERED ANOTHER TITLE'
SELECT Title, Team, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Backloggd
WHERE Plays > 1000
GROUP BY Title, Team
ORDER BY AVG_Played DESC;

SELECT Title, Team, ROUND(AVG(Rating),2) AS AVG_Rating, ROUND(AVG(PLAYS),0) AS AVG_Played, ROUND(AVG(PLAYING),0) AS AVG_Playing, ROUND(AVG(WISHLIST),0) as AVG_Wishes
FROM Backloggd
WHERE Team Like '%Nintendo EPD Production Group%'
GROUP BY Title, Team
ORDER BY AVG_Played DESC;